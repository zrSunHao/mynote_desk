<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:lcc="clr-namespace:BlizzardWind.Desktop.Controls.Converters;assembly=BlizzardWind.Desktop.Controls"
                    xmlns:lcb="clr-namespace:BlizzardWind.Desktop.Controls.Buttons;assembly=BlizzardWind.Desktop.Controls">

    <Style x:Key="ListOperateButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CommonOperateButtonStyle}">
        <Setter Property="Width" Value="50"/>
    </Style>
    
    <DataTemplate x:Key="FolderDataTemplate">
        <RadioButton Style="{DynamicResource FamilyBarRadioStyle}" Width="215" Height="40"
                     Background="{StaticResource Color.Primary}" Content="{Binding Name}"
                     Command="{Binding DataContext.FolderClickCommand,RelativeSource={RelativeSource AncestorType=Page}}"
                     CommandParameter="{Binding}">
            <RadioButton.ToolTip>
                <ToolTip Background="{StaticResource Color.Canvas.Background}">
                    <TextBlock Text="{Binding Name}" Foreground="{StaticResource Color.Font.Primary}"/>
                </ToolTip>
            </RadioButton.ToolTip>
            <RadioButton.IsChecked>
                <MultiBinding Converter="{StaticResource IDToRadioCheckedConverter}" Mode="OneWay" UpdateSourceTrigger="PropertyChanged">
                    <Binding Path="Id"></Binding>
                    <Binding Path="DataContext.FolderId" RelativeSource="{RelativeSource AncestorType=Page}"></Binding>
                </MultiBinding>
            </RadioButton.IsChecked>
        </RadioButton>
    </DataTemplate>
    
    <Style x:Key="FamilyRadioIconStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="Text" Value="&#xe5df;"/>
        <Setter Property="Foreground" Value="{StaticResource Color.Info}"/>
        <Setter Property="FontFamily" Value="{StaticResource Font.MaterialIcon}"/>
    </Style>

    <Style x:Key="FamilyRadioStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource ComminFamilyRadioStyle}">
        <Setter Property="Width" Value="240"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border Name="btn_bg"  Background="ForestGreen" Opacity="0.1"/>
                        <Border x:Name="radioButtonBorder" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="30"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock x:Name="optionMark" Style="{StaticResource FamilyRadioIconStyle}" 
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           TextTrimming="CharacterEllipsis"/>
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="btn_bg" Value="{StaticResource Color.Warn}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="btn_bg" Value="{StaticResource Color.Warn}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="btn_bg" Value="{StaticResource Color.Second}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" TargetName="btn_bg" Value="{StaticResource Color.Second}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsExpanded}" Value="True">
                            <Setter Property="Text" TargetName="optionMark" Value="&#xe5c5;"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <DataTemplate x:Key="FamilyDataTemplate">
        <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch">
            <RadioButton x:Name="radioButton" GroupName="familyBar" Style="{DynamicResource FamilyRadioStyle}" 
                         Content="{Binding DisplayName}" 
                         Command="{Binding DataContext.FamilyClickCommand,RelativeSource={RelativeSource AncestorType=Page}}"
                         CommandParameter="{Binding}">
                <RadioButton.ToolTip>
                    <ToolTip Background="{StaticResource Color.Canvas.Background}">
                        <TextBlock Text="{Binding DisplayName}" Foreground="{StaticResource Color.Font.Primary}"/>
                    </ToolTip>
                </RadioButton.ToolTip>
                <RadioButton.IsChecked>
                    <MultiBinding Converter="{StaticResource IDToRadioCheckedConverter}" Mode="OneWay" UpdateSourceTrigger="PropertyChanged">
                        <Binding Path="Id"></Binding>
                        <Binding Path="DataContext.FamilyId" RelativeSource="{RelativeSource AncestorType=Page}"></Binding>
                    </MultiBinding>
                </RadioButton.IsChecked>
            </RadioButton>
            <Expander Style="{DynamicResource ExpanderStyle}" IsExpanded="{Binding IsExpanded}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Line Y1="0" Y2="{Binding ActualHeight,ElementName=folders}" 
                          HorizontalAlignment="Center" VerticalAlignment="Center"  Margin="5,0,0,0"
                          StrokeThickness="2" Stroke="{StaticResource Color.Primary}" StrokeDashArray="3"/>
                    <ItemsControl x:Name="folders" Grid.Column="1"  
                                  ItemsSource="{Binding FoldersCollection}" Margin="0,5,0,5"
                                  ItemTemplate="{StaticResource FolderDataTemplate}"
                                  Style="{StaticResource FamilyBarItemsStyle}"/>
                </Grid>
            </Expander>
        </StackPanel>
    </DataTemplate>

    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" Visibility="Hidden"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              Margin="{TemplateBinding Padding}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              Visibility="Collapsed"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FamilyItemsStyle" TargetType="ItemsControl">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5,0,5,0"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="NoteCardDataTemplate">
        <lcb:NoteCard Margin="10" Height="250" Width="200"
                      Title="{Binding Title}" Keys="{Binding Keys}"
                      Time="{Binding DisplayTime}" FontCount="{Binding ContentLength}"
                      Tag="{Binding DataContext,RelativeSource={RelativeSource AncestorType=Page}}">
            <lcb:NoteCard.CoverImage>
                <MultiBinding Converter="{StaticResource NoteCoverPathToUriConverter}" Mode="OneWay">
                    <Binding  Path="CoverPicturePath" UpdateSourceTrigger="PropertyChanged"/>
                    <Binding  Path="CoverPictureKey" UpdateSourceTrigger="PropertyChanged"/>
                </MultiBinding>
            </lcb:NoteCard.CoverImage>
            <lcb:NoteCard.ContextMenu>
                <ContextMenu DataContext="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}"
                             Style="{StaticResource ContextMenuStyle}">
                    <MenuItem Header="查看" Command="{Binding NoteSeeCommand}" 
                              CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"
                              Style="{StaticResource ContextMenuItemStyle}"/>
                    <MenuItem Header="编辑" Command="{Binding NoteEditCommand}" 
                              CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"
                              Style="{StaticResource ContextMenuItemStyle}"/>
                    <MenuItem Header="移动" Command="{Binding NoteMoveCommand}" 
                              CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"
                              Style="{StaticResource ContextMenuItemStyle}"/>
                    <MenuItem Header="修改封面" Command="{Binding NoteUploadCoverCommand}" 
                              CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"
                              Style="{StaticResource ContextMenuItemStyle}"/>
                    <MenuItem Header="删除" Command="{Binding NoteDeleteCommand}" 
                              CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"
                              Style="{StaticResource ContextMenuItemStyle}"/>
                </ContextMenu>
            </lcb:NoteCard.ContextMenu>
        </lcb:NoteCard>
    </DataTemplate>

    <Style x:Key="NoteItemsStyle" TargetType="ItemsControl">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>